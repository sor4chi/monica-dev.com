---
import Copy from "../ui/icon/Copy.astro";
import Github from "../ui/icon/Github.astro";
import Check from "../ui/icon/Check.astro";
import X from "../ui/icon/X.astro";
import { styles } from "./Share.css";
import { clsx } from "clsx";

interface Props {
  url: string;
  title: string;
  source: string;
  flex?: boolean;
}

const { url, title, source, flex } = Astro.props;

const getShareXUrl = (title: string) => {
  return `https://x.com/intent/tweet?text=${encodeURIComponent(
    `${title}\n`,
  )}&url=${encodeURIComponent(url)}`;
};
---

<div class={clsx(styles.links, flex && styles.flex)}>
  <div class={styles.btnWrapper}>
    <button
      class={clsx(styles.btn, "link-copy-button")}
      onclick="navigator.clipboard.writeText(window.location.href)"
      aria-label="リンクをコピーする"
    >
      <Copy exClass={clsx(styles.icon, styles.copyIcon)} />
      <Check exClass={clsx(styles.icon, styles.checkIcon)} />
    </button>
    <span class={styles.btnDescription}>Copy URL</span>
  </div>
  <div class={styles.btnWrapper}>
    <a class={styles.btn} href={source} aria-label="ソースを開く">
      <Github exClass={styles.icon} />
    </a>
    <span class={styles.btnDescription}>Source</span>
  </div>
  <div class={styles.btnWrapper}>
    <a
      class={styles.btn}
      href={getShareXUrl(title)}
      aria-label="X でシェアする"
    >
      <X exClass={styles.icon} />
    </a>
    <span class={styles.btnDescription}>Share X</span>
  </div>
</div>

<script>
  const initLinkBopyButton = () => {
    const linkCopyButtons = document.querySelectorAll(".link-copy-button");
    linkCopyButtons.forEach((button) => {
      button.addEventListener("click", () => {
        button.classList.add("copied");
        setTimeout(() => {
          button.classList.remove("copied");
        }, 1000);
      });
    });
  };

  const init = () => {
    initLinkBopyButton();
  };

  init();

  document.addEventListener("astro:after-swap", () => {
    init();
  });
</script>

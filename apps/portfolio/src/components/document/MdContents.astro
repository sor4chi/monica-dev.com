---
import clsx from "clsx";

import { styles } from "./MdContents.css";
---

<div class={clsx(styles.contents, "markdown-contents")}>
  <slot />
</div>

<script>
  import van from "vanjs-core";

  import { SITE_BASE_URL } from "@/config";

  const { div, img, span, a } = van.tags;

  const getUnescapedText = (text: string) => {
    const div = document.createElement("div");
    div.innerHTML = text;
    return div.textContent || div.innerText || "";
  };


  const initCodeblock = () => {
    const codeCopyButtons = document.querySelectorAll(".code-copy-button");
    codeCopyButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const code = button.parentElement?.querySelector("code");
        if (!code) return;
        button.classList.add("copied");
        navigator.clipboard.writeText(code.innerText);
        setTimeout(() => {
          button.classList.remove("copied");
        }, 1000);
      });
    });
  };

  const LinkCardComponent = ({ url }) => {
    const isInternalLink = url.startsWith("/");
    const fullUrl = isInternalLink ? SITE_BASE_URL + url : url;
    const linkInfo = van.state({
      title: "Loading...",
      description: "",
      imageUrl: "",
      faviconUrl: "",
    });

    fetch(`https://embed.monica-dev.com/meta?url=${fullUrl}`)
      .then((res) => res.json())
      .then((data) => {
        linkInfo.val = {
          title: getUnescapedText(data.title),
          description: getUnescapedText(data.description),
          imageUrl: data.imageUrl,
          faviconUrl: data.faviconUrl,
        };
      })
      .catch(() => {
        linkInfo.val = {
          title: url,
          description: "",
          imageUrl: "",
          faviconUrl: "",
        };
      });

    return a(
      {
        class: "link-card",
        href: url || "",
        target: isInternalLink ? "" : "_blank",
        rel: isInternalLink ? "" : "noopener noreferrer",
      },
      [
        () =>
          linkInfo.val.imageUrl &&
          img({
            class: "link-card__image",
            src: linkInfo.val.imageUrl,
            alt: linkInfo.val.title,
          }),
        div({ class: "link-card__content" }, [
          span({ class: "link-card__title" }, () => linkInfo.val.title),
          div({ class: "link-card__meta" }, [
            () =>
              linkInfo.val.faviconUrl &&
              span({
                class: "link-card__favicon",
                style: `background-image: url(${linkInfo.val.faviconUrl});`,
              }),
            div({ class: "link-card__domain" }, new URL(fullUrl).hostname),
          ]),
        ]),
      ],
    );
  };

  const initLinkCard = () => {
    const links = document.querySelectorAll(".markdown-contents a.link-card");
    links.forEach((link) => {
      const url = link.getAttribute("href");
      link.replaceWith(LinkCardComponent({ url }));
    });
  };

  const init = () => {
    initCodeblock();
    initLinkCard();
  };

  init();

  document.addEventListener("astro:after-swap", () => {
    init();
  });
</script>

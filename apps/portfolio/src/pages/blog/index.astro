---
import { getCollection } from "astro:content";

import { slideIn } from "design-system/animation.css";

import BaseLayout from "@/components/layouts/Base.astro";
import Line from "@/components/ui/Line.astro";

import Container from "./_components/Container.astro";
import Footer from "./_components/Footer.astro";
import Item from "./_components/Item.astro";
import List from "./_components/List.astro";
import Section from "./_components/Section.astro";

import type { CollectionEntry } from "astro:content";

const [originalBlogs, externalBlogs] = await Promise.all([
  getCollection("blogs"),
  getCollection("externalBlogs"),
]);

const isExternalBlog = (
  blog: unknown,
): blog is CollectionEntry<"externalBlogs"> => {
  return "url" in blog.data;
};

const blogs = [...originalBlogs, ...externalBlogs];

const groupedBlogs = blogs.reduce(
  (acc, blog) => {
    const year = blog.data.publishedAt.getFullYear();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(blog);
    return acc;
  },
  {} as Record<string, typeof blogs>,
);
const sortedGroupedBlogs = Object.entries(groupedBlogs)
  .sort(([a], [b]) => Number(b) - Number(a))
  .map(
    ([year, blogs]) =>
      [
        year,
        blogs.sort(
          (a, b) => b.data.publishedAt.getTime() - a.data.publishedAt.getTime(),
        ),
      ] as const,
  );
const animationDelay = 0.1;
---

<BaseLayout title="Blog" canonical="/blog" active="/blog">
  <Container>
    {
      sortedGroupedBlogs.map(([year, blogs], i) => (
        <Section index={i}>
          <List title={year} first={i === 0}>
            {blogs.map((blog) => (
              <Item
                title={blog.data.title}
                slug={blog.slug}
                url={isExternalBlog(blog) ? blog.data.url : undefined}
              />
            ))}
          </List>
          {i < sortedGroupedBlogs.length - 1 && <Line />}
        </Section>
      ))
    }
    <Footer />
  </Container>
</BaseLayout>
